/**
 * FastAPI
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { AggBar } from '../model/agg-bar';
// @ts-ignore
import { HTTPValidationError } from '../model/http-validation-error';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';


export interface GetCustomBarsApiAggregatesCustomBarsGetRequestParams {
    ticker: string;
    from: string;
    to: string;
    multiplier?: number;
    timespan?: 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';
    adjusted?: boolean | null;
    sort?: 'asc' | 'desc';
    limit?: number | null;
    maxItems?: number | null;
}


@Injectable({
  providedIn: 'root'
})
export class AggregateTimeseriesBarsApiService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Get Custom Bars
     * Fetch Polygon custom aggregate bars for a ticker over a date range.  Mirrors Polygon\&#39;s /v2/aggs/ticker/{ticker}/range/{multiplier}/{timespan}/{from}/{to}. Returns a list of bars (dicts) suitable for charting.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCustomBarsApiAggregatesCustomBarsGet(requestParameters: GetCustomBarsApiAggregatesCustomBarsGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<AggBar>>;
    public getCustomBarsApiAggregatesCustomBarsGet(requestParameters: GetCustomBarsApiAggregatesCustomBarsGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<AggBar>>>;
    public getCustomBarsApiAggregatesCustomBarsGet(requestParameters: GetCustomBarsApiAggregatesCustomBarsGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<AggBar>>>;
    public getCustomBarsApiAggregatesCustomBarsGet(requestParameters: GetCustomBarsApiAggregatesCustomBarsGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const ticker = requestParameters?.ticker;
        if (ticker === null || ticker === undefined) {
            throw new Error('Required parameter ticker was null or undefined when calling getCustomBarsApiAggregatesCustomBarsGet.');
        }
        const from = requestParameters?.from;
        if (from === null || from === undefined) {
            throw new Error('Required parameter from was null or undefined when calling getCustomBarsApiAggregatesCustomBarsGet.');
        }
        const to = requestParameters?.to;
        if (to === null || to === undefined) {
            throw new Error('Required parameter to was null or undefined when calling getCustomBarsApiAggregatesCustomBarsGet.');
        }
        const multiplier = requestParameters?.multiplier;
        const timespan = requestParameters?.timespan;
        const adjusted = requestParameters?.adjusted;
        const sort = requestParameters?.sort;
        const limit = requestParameters?.limit;
        const maxItems = requestParameters?.maxItems;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ticker, 'ticker');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>multiplier, 'multiplier');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>timespan, 'timespan');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>from, 'from');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>to, 'to');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>adjusted, 'adjusted');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sort, 'sort');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>maxItems, 'max_items');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/aggregates/custom-bars`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Array<AggBar>>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
