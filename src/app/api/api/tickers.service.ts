/**
 * FastAPI
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { HTTPValidationError } from '../model/http-validation-error';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';


export interface SearchTickersEndpointApiTickersSearchGetRequestParams {
    /** User input (symbol or company substring) */
    q: string;
    limit?: number;
}

export interface SearchTickersEndpointApiTickersSearchGet0RequestParams {
    /** User input (symbol or company substring) */
    q: string;
    limit?: number;
}

export interface StartTickerBrandingHarvestEndpointApiTickersHarvestBrandingPostRequestParams {
    /** Skip tickers that already have branding stored */
    skipExisting?: boolean;
    /** Limit the number of tickers to process */
    maxTickers?: number | null;
    /** Concurrent workers */
    concurrency?: number;
}

export interface StartTickerBrandingHarvestEndpointApiTickersHarvestBrandingPost0RequestParams {
    /** Skip tickers that already have branding stored */
    skipExisting?: boolean;
    /** Limit the number of tickers to process */
    maxTickers?: number | null;
    /** Concurrent workers */
    concurrency?: number;
}

export interface StartTickerDetailsHarvestEndpointApiTickersHarvestDetailsPostRequestParams {
    /** Process inactive tickers too */
    includeInactive?: boolean;
    /** Limit the number of tickers to process */
    maxTickers?: number | null;
    /** Skip tickers updated within this many days */
    skipFreshDays?: number;
    /** Concurrent workers */
    concurrency?: number;
}

export interface StartTickerDetailsHarvestEndpointApiTickersHarvestDetailsPost0RequestParams {
    /** Process inactive tickers too */
    includeInactive?: boolean;
    /** Limit the number of tickers to process */
    maxTickers?: number | null;
    /** Skip tickers updated within this many days */
    skipFreshDays?: number;
    /** Concurrent workers */
    concurrency?: number;
}


@Injectable({
  providedIn: 'root'
})
export class TickersApiService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Autocomplete tickers by symbol or company name
     * Case-insensitive search over &#x60;ticker&#x60; and &#x60;name&#x60; fields in the tickers collection.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchTickersEndpointApiTickersSearchGet(requestParameters: SearchTickersEndpointApiTickersSearchGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public searchTickersEndpointApiTickersSearchGet(requestParameters: SearchTickersEndpointApiTickersSearchGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public searchTickersEndpointApiTickersSearchGet(requestParameters: SearchTickersEndpointApiTickersSearchGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public searchTickersEndpointApiTickersSearchGet(requestParameters: SearchTickersEndpointApiTickersSearchGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const q = requestParameters?.q;
        if (q === null || q === undefined) {
            throw new Error('Required parameter q was null or undefined when calling searchTickersEndpointApiTickersSearchGet.');
        }
        const limit = requestParameters?.limit;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>q, 'q');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/tickers/search`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Autocomplete tickers by symbol or company name
     * Case-insensitive search over &#x60;ticker&#x60; and &#x60;name&#x60; fields in the tickers collection.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchTickersEndpointApiTickersSearchGet_1(requestParameters: SearchTickersEndpointApiTickersSearchGet0RequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public searchTickersEndpointApiTickersSearchGet_1(requestParameters: SearchTickersEndpointApiTickersSearchGet0RequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public searchTickersEndpointApiTickersSearchGet_1(requestParameters: SearchTickersEndpointApiTickersSearchGet0RequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public searchTickersEndpointApiTickersSearchGet_1(requestParameters: SearchTickersEndpointApiTickersSearchGet0RequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const q = requestParameters?.q;
        if (q === null || q === undefined) {
            throw new Error('Required parameter q was null or undefined when calling searchTickersEndpointApiTickersSearchGet_1.');
        }
        const limit = requestParameters?.limit;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>q, 'q');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/tickers/search`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Manually start Polygon ticker branding harvest
     * Kick off the enrichment job that fetches Polygon Ticker branding (logos/icons) and updates the DB. Runs asynchronously so the request returns immediately.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public startTickerBrandingHarvestEndpointApiTickersHarvestBrandingPost(requestParameters?: StartTickerBrandingHarvestEndpointApiTickersHarvestBrandingPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public startTickerBrandingHarvestEndpointApiTickersHarvestBrandingPost(requestParameters?: StartTickerBrandingHarvestEndpointApiTickersHarvestBrandingPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public startTickerBrandingHarvestEndpointApiTickersHarvestBrandingPost(requestParameters?: StartTickerBrandingHarvestEndpointApiTickersHarvestBrandingPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public startTickerBrandingHarvestEndpointApiTickersHarvestBrandingPost(requestParameters?: StartTickerBrandingHarvestEndpointApiTickersHarvestBrandingPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const skipExisting = requestParameters?.skipExisting;
        const maxTickers = requestParameters?.maxTickers;
        const concurrency = requestParameters?.concurrency;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>skipExisting, 'skip_existing');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>maxTickers, 'max_tickers');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>concurrency, 'concurrency');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/tickers/harvest-branding`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Manually start Polygon ticker branding harvest
     * Kick off the enrichment job that fetches Polygon Ticker branding (logos/icons) and updates the DB. Runs asynchronously so the request returns immediately.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public startTickerBrandingHarvestEndpointApiTickersHarvestBrandingPost_2(requestParameters?: StartTickerBrandingHarvestEndpointApiTickersHarvestBrandingPost0RequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public startTickerBrandingHarvestEndpointApiTickersHarvestBrandingPost_2(requestParameters?: StartTickerBrandingHarvestEndpointApiTickersHarvestBrandingPost0RequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public startTickerBrandingHarvestEndpointApiTickersHarvestBrandingPost_2(requestParameters?: StartTickerBrandingHarvestEndpointApiTickersHarvestBrandingPost0RequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public startTickerBrandingHarvestEndpointApiTickersHarvestBrandingPost_2(requestParameters?: StartTickerBrandingHarvestEndpointApiTickersHarvestBrandingPost0RequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const skipExisting = requestParameters?.skipExisting;
        const maxTickers = requestParameters?.maxTickers;
        const concurrency = requestParameters?.concurrency;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>skipExisting, 'skip_existing');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>maxTickers, 'max_tickers');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>concurrency, 'concurrency');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/tickers/harvest-branding`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Manually start Polygon ticker details harvest
     * Kick off the enrichment job that fetches Polygon Ticker Overview details and updates the DB. Runs asynchronously so the request returns immediately.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public startTickerDetailsHarvestEndpointApiTickersHarvestDetailsPost(requestParameters?: StartTickerDetailsHarvestEndpointApiTickersHarvestDetailsPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public startTickerDetailsHarvestEndpointApiTickersHarvestDetailsPost(requestParameters?: StartTickerDetailsHarvestEndpointApiTickersHarvestDetailsPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public startTickerDetailsHarvestEndpointApiTickersHarvestDetailsPost(requestParameters?: StartTickerDetailsHarvestEndpointApiTickersHarvestDetailsPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public startTickerDetailsHarvestEndpointApiTickersHarvestDetailsPost(requestParameters?: StartTickerDetailsHarvestEndpointApiTickersHarvestDetailsPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const includeInactive = requestParameters?.includeInactive;
        const maxTickers = requestParameters?.maxTickers;
        const skipFreshDays = requestParameters?.skipFreshDays;
        const concurrency = requestParameters?.concurrency;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>includeInactive, 'include_inactive');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>maxTickers, 'max_tickers');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>skipFreshDays, 'skip_fresh_days');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>concurrency, 'concurrency');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/tickers/harvest-details`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Manually start Polygon ticker details harvest
     * Kick off the enrichment job that fetches Polygon Ticker Overview details and updates the DB. Runs asynchronously so the request returns immediately.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public startTickerDetailsHarvestEndpointApiTickersHarvestDetailsPost_3(requestParameters?: StartTickerDetailsHarvestEndpointApiTickersHarvestDetailsPost0RequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public startTickerDetailsHarvestEndpointApiTickersHarvestDetailsPost_3(requestParameters?: StartTickerDetailsHarvestEndpointApiTickersHarvestDetailsPost0RequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public startTickerDetailsHarvestEndpointApiTickersHarvestDetailsPost_3(requestParameters?: StartTickerDetailsHarvestEndpointApiTickersHarvestDetailsPost0RequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public startTickerDetailsHarvestEndpointApiTickersHarvestDetailsPost_3(requestParameters?: StartTickerDetailsHarvestEndpointApiTickersHarvestDetailsPost0RequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const includeInactive = requestParameters?.includeInactive;
        const maxTickers = requestParameters?.maxTickers;
        const skipFreshDays = requestParameters?.skipFreshDays;
        const concurrency = requestParameters?.concurrency;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>includeInactive, 'include_inactive');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>maxTickers, 'max_tickers');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>skipFreshDays, 'skip_fresh_days');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>concurrency, 'concurrency');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/tickers/harvest-details`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
