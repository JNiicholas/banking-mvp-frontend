/**
 * FastAPI
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { HTTPValidationError } from '../model/http-validation-error';
// @ts-ignore
import { NewsItem } from '../model/news-item';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';


export interface GetNewsNewsTickerGetRequestParams {
    ticker: string;
}

export interface GetTickerNewsApiNewsTickerGetRequestParams {
    ticker?: string | null;
    /** ISO 8601, e.g. 2025-09-01 or 2025-09-01T00:00:00Z */
    publishedUtcGte?: string | null;
    /** ISO 8601 */
    publishedUtcLte?: string | null;
    order?: 'asc' | 'desc' | null;
    sort?: string | null;
    limit?: number | null;
    source?: string | null;
    maxItems?: number | null;
}


@Injectable({
  providedIn: 'root'
})
export class NewsApiService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Recent news for a ticker
     * Returns recent headlines and sentiment for the ticker. Placeholder response.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNewsNewsTickerGet(requestParameters: GetNewsNewsTickerGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public getNewsNewsTickerGet(requestParameters: GetNewsNewsTickerGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public getNewsNewsTickerGet(requestParameters: GetNewsNewsTickerGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public getNewsNewsTickerGet(requestParameters: GetNewsNewsTickerGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const ticker = requestParameters?.ticker;
        if (ticker === null || ticker === undefined) {
            throw new Error('Required parameter ticker was null or undefined when calling getNewsNewsTickerGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/news/${this.configuration.encodeParam({name: "ticker", value: ticker, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Ticker News
     * Proxy to Polygon ticker news. Docs: https://polygon.io/docs/rest/stocks/news  Examples:   /api/news/ticker?ticker&#x3D;AAPL&amp;limit&#x3D;25&amp;order&#x3D;desc   /api/news/ticker?published_utc_gte&#x3D;2025-09-01&amp;order&#x3D;asc
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTickerNewsApiNewsTickerGet(requestParameters?: GetTickerNewsApiNewsTickerGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<NewsItem>>;
    public getTickerNewsApiNewsTickerGet(requestParameters?: GetTickerNewsApiNewsTickerGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<NewsItem>>>;
    public getTickerNewsApiNewsTickerGet(requestParameters?: GetTickerNewsApiNewsTickerGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<NewsItem>>>;
    public getTickerNewsApiNewsTickerGet(requestParameters?: GetTickerNewsApiNewsTickerGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const ticker = requestParameters?.ticker;
        const publishedUtcGte = requestParameters?.publishedUtcGte;
        const publishedUtcLte = requestParameters?.publishedUtcLte;
        const order = requestParameters?.order;
        const sort = requestParameters?.sort;
        const limit = requestParameters?.limit;
        const source = requestParameters?.source;
        const maxItems = requestParameters?.maxItems;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ticker, 'ticker');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>publishedUtcGte, 'published_utc_gte');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>publishedUtcLte, 'published_utc_lte');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>order, 'order');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sort, 'sort');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>source, 'source');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>maxItems, 'max_items');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/news/ticker`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Array<NewsItem>>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
