/**
 * FastAPI
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { DividendSearchRequest } from '../model/dividend-search-request';
// @ts-ignore
import { DividendSearchResponse } from '../model/dividend-search-response';
// @ts-ignore
import { DividendTickersRequest } from '../model/dividend-tickers-request';
// @ts-ignore
import { DividendTickersResponse } from '../model/dividend-tickers-response';
// @ts-ignore
import { HTTPValidationError } from '../model/http-validation-error';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';


export interface DividendsByFrequencyEndpointDividendsFrequencyFrequencyGetRequestParams {
    frequency: number;
    limit?: number;
}

export interface DividendsEndpointApiDividendsTickerGetRequestParams {
    ticker: string;
    /** Page number (1-based) */
    page?: number;
    /** Page size */
    pageSize?: number;
    /** Sort order: \&#39;asc\&#39; or \&#39;desc\&#39; */
    order?: string;
    /** Field to sort by, e.g., \&#39;ex_dividend_date\&#39; or \&#39;pay_date\&#39; */
    sort?: string;
    /** Filter: ex-dividend date &gt;&#x3D; (YYYY-MM-DD) */
    exDividendDateGte?: string | null;
    /** Filter: ex-dividend date &lt;&#x3D; (YYYY-MM-DD) */
    exDividendDateLte?: string | null;
    /** Free-text search across dates and cash_amount */
    searchString?: string | null;
}

export interface DividendsEndpointDividendsTickerGetRequestParams {
    ticker: string;
    /** Page number (1-based) */
    page?: number;
    /** Page size */
    pageSize?: number;
    /** Order of results: \&#39;asc\&#39; or \&#39;desc\&#39; */
    order?: string;
    /** Field to sort by, e.g., \&#39;ex_dividend_date\&#39; or \&#39;payment_date\&#39; */
    sort?: string;
    /** Filter: ex-dividend date greater or equal (YYYY-MM-DD) */
    exDividendDateGte?: string;
    /** Filter: ex-dividend date less or equal (YYYY-MM-DD) */
    exDividendDateLte?: string;
    /** Free-text search across declaration_date, ex_dividend_date, pay_date, record_date, and cash_amount */
    searchString?: string | null;
}

export interface DividendsYearlyEndpointApiDividendsYearlyTickerGetRequestParams {
    ticker: string;
}

export interface HarvestDividendHistoryEndpointDividendsHistoryHarvestPostRequestParams {
    outDir?: string | null;
    concurrency?: number;
    limitPerPage?: number;
    includeInactive?: boolean;
    maxTickers?: number | null;
    skipExisting?: boolean;
    writeJson?: boolean;
}

export interface HarvestStatusDividendsHarvestStatusJobIdGetRequestParams {
    jobId: string;
}

export interface ListDividendTickersApiDividendsTickersPostRequestParams {
    dividendTickersRequest: DividendTickersRequest;
}

export interface ListDividendTickersApiDividendsUniqueTickersPostRequestParams {
    dividendTickersRequest: DividendTickersRequest;
}

export interface SearchDividendsApiDividendsSearchPostRequestParams {
    dividendSearchRequest: DividendSearchRequest;
}

export interface UniquePayersByFrequencyDividendsFrequencyFrequencyTickersGetRequestParams {
    frequency: number;
    lookbackDays?: number;
    minCount?: number;
    limitPerPage?: number;
    order?: string;
    sort?: string;
    maxRecords?: number | null;
    justTickers?: boolean;
    growthCheckEvery?: number;
    stopWhenNoGrowthSteps?: number;
}


@Injectable({
  providedIn: 'root'
})
export class DividendsApiService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Dividends by payout frequency
     * Returns dividend data filtered by payout frequency (0, 1, 2, 4, 12, 24, 52).
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dividendsByFrequencyEndpointDividendsFrequencyFrequencyGet(requestParameters: DividendsByFrequencyEndpointDividendsFrequencyFrequencyGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public dividendsByFrequencyEndpointDividendsFrequencyFrequencyGet(requestParameters: DividendsByFrequencyEndpointDividendsFrequencyFrequencyGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public dividendsByFrequencyEndpointDividendsFrequencyFrequencyGet(requestParameters: DividendsByFrequencyEndpointDividendsFrequencyFrequencyGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public dividendsByFrequencyEndpointDividendsFrequencyFrequencyGet(requestParameters: DividendsByFrequencyEndpointDividendsFrequencyFrequencyGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const frequency = requestParameters?.frequency;
        if (frequency === null || frequency === undefined) {
            throw new Error('Required parameter frequency was null or undefined when calling dividendsByFrequencyEndpointDividendsFrequencyFrequencyGet.');
        }
        const limit = requestParameters?.limit;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/dividends/frequency/${this.configuration.encodeParam({name: "frequency", value: frequency, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Recent dividends for a ticker (DB-backed)
     * Reads directly from your internal &#x60;dividends&#x60; collection instead of calling external APIs.  Supports paging, sorting, optional ex-dividend date window, and free-text search across date fields and cash amount. Returns the company name from the &#x60;tickers&#x60; collection alongside the ticker.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dividendsEndpointApiDividendsTickerGet(requestParameters: DividendsEndpointApiDividendsTickerGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public dividendsEndpointApiDividendsTickerGet(requestParameters: DividendsEndpointApiDividendsTickerGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public dividendsEndpointApiDividendsTickerGet(requestParameters: DividendsEndpointApiDividendsTickerGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public dividendsEndpointApiDividendsTickerGet(requestParameters: DividendsEndpointApiDividendsTickerGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const ticker = requestParameters?.ticker;
        if (ticker === null || ticker === undefined) {
            throw new Error('Required parameter ticker was null or undefined when calling dividendsEndpointApiDividendsTickerGet.');
        }
        const page = requestParameters?.page;
        const pageSize = requestParameters?.pageSize;
        const order = requestParameters?.order;
        const sort = requestParameters?.sort;
        const exDividendDateGte = requestParameters?.exDividendDateGte;
        const exDividendDateLte = requestParameters?.exDividendDateLte;
        const searchString = requestParameters?.searchString;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>page, 'page');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pageSize, 'page_size');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>order, 'order');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sort, 'sort');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>exDividendDateGte, 'ex_dividend_date_gte');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>exDividendDateLte, 'ex_dividend_date_lte');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>searchString, 'searchString');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dividends/${this.configuration.encodeParam({name: "ticker", value: ticker, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Recent dividends for a ticker
     * Fetches recent dividend events for the specified ticker.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dividendsEndpointDividendsTickerGet(requestParameters: DividendsEndpointDividendsTickerGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public dividendsEndpointDividendsTickerGet(requestParameters: DividendsEndpointDividendsTickerGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public dividendsEndpointDividendsTickerGet(requestParameters: DividendsEndpointDividendsTickerGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public dividendsEndpointDividendsTickerGet(requestParameters: DividendsEndpointDividendsTickerGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const ticker = requestParameters?.ticker;
        if (ticker === null || ticker === undefined) {
            throw new Error('Required parameter ticker was null or undefined when calling dividendsEndpointDividendsTickerGet.');
        }
        const page = requestParameters?.page;
        const pageSize = requestParameters?.pageSize;
        const order = requestParameters?.order;
        const sort = requestParameters?.sort;
        const exDividendDateGte = requestParameters?.exDividendDateGte;
        const exDividendDateLte = requestParameters?.exDividendDateLte;
        const searchString = requestParameters?.searchString;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>page, 'page');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pageSize, 'page_size');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>order, 'order');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sort, 'sort');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>exDividendDateGte, 'ex_dividend_date_gte');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>exDividendDateLte, 'ex_dividend_date_lte');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>searchString, 'searchString');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/dividends/${this.configuration.encodeParam({name: "ticker", value: ticker, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Yearly dividend history (DB-backed)
     * Aggregates per-year dividend totals from the &#x60;dividends&#x60; collection for the given ticker. Marks the current year as YTD and returns the company name from the &#x60;tickers&#x60; collection.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dividendsYearlyEndpointApiDividendsYearlyTickerGet(requestParameters: DividendsYearlyEndpointApiDividendsYearlyTickerGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public dividendsYearlyEndpointApiDividendsYearlyTickerGet(requestParameters: DividendsYearlyEndpointApiDividendsYearlyTickerGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public dividendsYearlyEndpointApiDividendsYearlyTickerGet(requestParameters: DividendsYearlyEndpointApiDividendsYearlyTickerGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public dividendsYearlyEndpointApiDividendsYearlyTickerGet(requestParameters: DividendsYearlyEndpointApiDividendsYearlyTickerGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const ticker = requestParameters?.ticker;
        if (ticker === null || ticker === undefined) {
            throw new Error('Required parameter ticker was null or undefined when calling dividendsYearlyEndpointApiDividendsYearlyTickerGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dividends/yearly/${this.configuration.encodeParam({name: "ticker", value: ticker, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Harvest complete dividend history
     * Fetches complete dividend history for all available tickers from Polygon and writes NDJSON files per ticker.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public harvestDividendHistoryEndpointDividendsHistoryHarvestPost(requestParameters?: HarvestDividendHistoryEndpointDividendsHistoryHarvestPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public harvestDividendHistoryEndpointDividendsHistoryHarvestPost(requestParameters?: HarvestDividendHistoryEndpointDividendsHistoryHarvestPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public harvestDividendHistoryEndpointDividendsHistoryHarvestPost(requestParameters?: HarvestDividendHistoryEndpointDividendsHistoryHarvestPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public harvestDividendHistoryEndpointDividendsHistoryHarvestPost(requestParameters?: HarvestDividendHistoryEndpointDividendsHistoryHarvestPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const outDir = requestParameters?.outDir;
        const concurrency = requestParameters?.concurrency;
        const limitPerPage = requestParameters?.limitPerPage;
        const includeInactive = requestParameters?.includeInactive;
        const maxTickers = requestParameters?.maxTickers;
        const skipExisting = requestParameters?.skipExisting;
        const writeJson = requestParameters?.writeJson;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>outDir, 'out_dir');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>concurrency, 'concurrency');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limitPerPage, 'limit_per_page');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>includeInactive, 'include_inactive');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>maxTickers, 'max_tickers');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>skipExisting, 'skip_existing');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>writeJson, 'write_json');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/dividends/history/harvest`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Dividend harvest status
     * Poll the status of a running/background dividend harvest job by job_id.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public harvestStatusDividendsHarvestStatusJobIdGet(requestParameters: HarvestStatusDividendsHarvestStatusJobIdGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public harvestStatusDividendsHarvestStatusJobIdGet(requestParameters: HarvestStatusDividendsHarvestStatusJobIdGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public harvestStatusDividendsHarvestStatusJobIdGet(requestParameters: HarvestStatusDividendsHarvestStatusJobIdGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public harvestStatusDividendsHarvestStatusJobIdGet(requestParameters: HarvestStatusDividendsHarvestStatusJobIdGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const jobId = requestParameters?.jobId;
        if (jobId === null || jobId === undefined) {
            throw new Error('Required parameter jobId was null or undefined when calling harvestStatusDividendsHarvestStatusJobIdGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/dividends/harvest/status/${this.configuration.encodeParam({name: "jobId", value: jobId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List unique dividend payers (tickers) for a frequency (e.g., monthly&#x3D;12)
     * Return only the **tickers** that pay dividends with the requested &#x60;frequency&#x60; (default: monthly &#x3D; 12), optionally filtered by an ex-dividend date window.  - **frequency**: 0 (one-time), 1 (annual), 2 (semi-annual), 4 (quarterly), 12 (monthly), 24 (bi-monthly), 52 (weekly). - **dividend_type**: e.g. [\&quot;CD\&quot;] for regular cash dividends, [\&quot;SC\&quot;] for special. - **include_market**: if true (default), each row includes the &#x60;market&#x60; looked up from the &#x60;tickers&#x60; collection. - Sorted alphabetically by ticker; paginated with &#x60;page&#x60; / &#x60;page_size&#x60;.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listDividendTickersApiDividendsTickersPost(requestParameters: ListDividendTickersApiDividendsTickersPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<DividendTickersResponse>;
    public listDividendTickersApiDividendsTickersPost(requestParameters: ListDividendTickersApiDividendsTickersPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<DividendTickersResponse>>;
    public listDividendTickersApiDividendsTickersPost(requestParameters: ListDividendTickersApiDividendsTickersPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<DividendTickersResponse>>;
    public listDividendTickersApiDividendsTickersPost(requestParameters: ListDividendTickersApiDividendsTickersPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const dividendTickersRequest = requestParameters?.dividendTickersRequest;
        if (dividendTickersRequest === null || dividendTickersRequest === undefined) {
            throw new Error('Required parameter dividendTickersRequest was null or undefined when calling listDividendTickersApiDividendsTickersPost.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dividends/tickers`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<DividendTickersResponse>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: dividendTickersRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List unique dividend payers (DB-backed)
     * Returns unique tickers paying dividends at the requested frequency from the internal &#x60;dividends&#x60; collection.  - **frequency**: 0 (one-time), 1 (annual), 2 (semi-annual), 4 (quarterly), 12 (monthly), 24 (bi-monthly), 52 (weekly). - **dividend_type**: e.g. [\&quot;CD\&quot;] for regular cash dividends, [\&quot;SC\&quot;] for special. - **include_market**: if true (default), each row includes the &#x60;market&#x60; looked up from &#x60;tickers&#x60;. - Sorted alphabetically by ticker; paginated with &#x60;page&#x60; / &#x60;page_size&#x60;.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listDividendTickersApiDividendsUniqueTickersPost(requestParameters: ListDividendTickersApiDividendsUniqueTickersPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<DividendTickersResponse>;
    public listDividendTickersApiDividendsUniqueTickersPost(requestParameters: ListDividendTickersApiDividendsUniqueTickersPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<DividendTickersResponse>>;
    public listDividendTickersApiDividendsUniqueTickersPost(requestParameters: ListDividendTickersApiDividendsUniqueTickersPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<DividendTickersResponse>>;
    public listDividendTickersApiDividendsUniqueTickersPost(requestParameters: ListDividendTickersApiDividendsUniqueTickersPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const dividendTickersRequest = requestParameters?.dividendTickersRequest;
        if (dividendTickersRequest === null || dividendTickersRequest === undefined) {
            throw new Error('Required parameter dividendTickersRequest was null or undefined when calling listDividendTickersApiDividendsUniqueTickersPost.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dividends/unique-tickers`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<DividendTickersResponse>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: dividendTickersRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search dividends by filters
     * Search the dividends time-series collection.  Frequency values: 0 (one-time), 1 (annually), 2 (bi-annually), 4 (quarterly), 12 (monthly), 24 (bi-monthly), 52 (weekly).  Dividend types: - CD — Cash Dividend - SC — Special Cash Dividend
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchDividendsApiDividendsSearchPost(requestParameters: SearchDividendsApiDividendsSearchPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<DividendSearchResponse>;
    public searchDividendsApiDividendsSearchPost(requestParameters: SearchDividendsApiDividendsSearchPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<DividendSearchResponse>>;
    public searchDividendsApiDividendsSearchPost(requestParameters: SearchDividendsApiDividendsSearchPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<DividendSearchResponse>>;
    public searchDividendsApiDividendsSearchPost(requestParameters: SearchDividendsApiDividendsSearchPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const dividendSearchRequest = requestParameters?.dividendSearchRequest;
        if (dividendSearchRequest === null || dividendSearchRequest === undefined) {
            throw new Error('Required parameter dividendSearchRequest was null or undefined when calling searchDividendsApiDividendsSearchPost.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dividends/search`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<DividendSearchResponse>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: dividendSearchRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Start async dividend harvest
     * Starts a background task to harvest complete dividend history for all tickers and returns a job_id.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public startDividendHarvestDividendsHarvestStartPost(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public startDividendHarvestDividendsHarvestStartPost(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public startDividendHarvestDividendsHarvestStartPost(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public startDividendHarvestDividendsHarvestStartPost(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/dividends/harvest/start`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Tickers paying at a frequency
     * Lists unique tickers that currently pay with the given dividend frequency within a recent lookback window.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uniquePayersByFrequencyDividendsFrequencyFrequencyTickersGet(requestParameters: UniquePayersByFrequencyDividendsFrequencyFrequencyTickersGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public uniquePayersByFrequencyDividendsFrequencyFrequencyTickersGet(requestParameters: UniquePayersByFrequencyDividendsFrequencyFrequencyTickersGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public uniquePayersByFrequencyDividendsFrequencyFrequencyTickersGet(requestParameters: UniquePayersByFrequencyDividendsFrequencyFrequencyTickersGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public uniquePayersByFrequencyDividendsFrequencyFrequencyTickersGet(requestParameters: UniquePayersByFrequencyDividendsFrequencyFrequencyTickersGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const frequency = requestParameters?.frequency;
        if (frequency === null || frequency === undefined) {
            throw new Error('Required parameter frequency was null or undefined when calling uniquePayersByFrequencyDividendsFrequencyFrequencyTickersGet.');
        }
        const lookbackDays = requestParameters?.lookbackDays;
        const minCount = requestParameters?.minCount;
        const limitPerPage = requestParameters?.limitPerPage;
        const order = requestParameters?.order;
        const sort = requestParameters?.sort;
        const maxRecords = requestParameters?.maxRecords;
        const justTickers = requestParameters?.justTickers;
        const growthCheckEvery = requestParameters?.growthCheckEvery;
        const stopWhenNoGrowthSteps = requestParameters?.stopWhenNoGrowthSteps;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>lookbackDays, 'lookback_days');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>minCount, 'min_count');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limitPerPage, 'limit_per_page');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>order, 'order');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sort, 'sort');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>maxRecords, 'max_records');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>justTickers, 'just_tickers');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>growthCheckEvery, 'growth_check_every');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>stopWhenNoGrowthSteps, 'stop_when_no_growth_steps');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/dividends/frequency/${this.configuration.encodeParam({name: "frequency", value: frequency, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/tickers`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
