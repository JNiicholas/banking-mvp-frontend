/**
 * FastAPI
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { AddItemsPayload } from '../model/add-items-payload';
// @ts-ignore
import { HTTPValidationError } from '../model/http-validation-error';
// @ts-ignore
import { ReorderPayload } from '../model/reorder-payload';
// @ts-ignore
import { WatchlistCreate } from '../model/watchlist-create';
// @ts-ignore
import { WatchlistOut } from '../model/watchlist-out';
// @ts-ignore
import { WatchlistUpdate } from '../model/watchlist-update';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';


export interface AddItemsApiWatchlistsWatchlistIdItemsPostRequestParams {
    watchlistId: string;
    addItemsPayload: AddItemsPayload;
}

export interface CreateWatchlistApiWatchlistsPostRequestParams {
    watchlistCreate: WatchlistCreate;
}

export interface DeleteWatchlistApiWatchlistsWatchlistIdDeleteRequestParams {
    watchlistId: string;
}

export interface GetWatchlistApiWatchlistsWatchlistIdGetRequestParams {
    watchlistId: string;
}

export interface RemoveItemApiWatchlistsWatchlistIdItemsSymbolDeleteRequestParams {
    watchlistId: string;
    symbol: string;
}

export interface ReorderItemsApiWatchlistsWatchlistIdItemsReorderPatchRequestParams {
    watchlistId: string;
    reorderPayload: ReorderPayload;
}

export interface UpdateWatchlistApiWatchlistsWatchlistIdPatchRequestParams {
    watchlistId: string;
    watchlistUpdate: WatchlistUpdate;
}


@Injectable({
  providedIn: 'root'
})
export class WatchlistsApiService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Add Items
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addItemsApiWatchlistsWatchlistIdItemsPost(requestParameters: AddItemsApiWatchlistsWatchlistIdItemsPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<WatchlistOut>;
    public addItemsApiWatchlistsWatchlistIdItemsPost(requestParameters: AddItemsApiWatchlistsWatchlistIdItemsPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<WatchlistOut>>;
    public addItemsApiWatchlistsWatchlistIdItemsPost(requestParameters: AddItemsApiWatchlistsWatchlistIdItemsPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<WatchlistOut>>;
    public addItemsApiWatchlistsWatchlistIdItemsPost(requestParameters: AddItemsApiWatchlistsWatchlistIdItemsPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const watchlistId = requestParameters?.watchlistId;
        if (watchlistId === null || watchlistId === undefined) {
            throw new Error('Required parameter watchlistId was null or undefined when calling addItemsApiWatchlistsWatchlistIdItemsPost.');
        }
        const addItemsPayload = requestParameters?.addItemsPayload;
        if (addItemsPayload === null || addItemsPayload === undefined) {
            throw new Error('Required parameter addItemsPayload was null or undefined when calling addItemsApiWatchlistsWatchlistIdItemsPost.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/watchlists/${this.configuration.encodeParam({name: "watchlistId", value: watchlistId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/items`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<WatchlistOut>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: addItemsPayload,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create Watchlist
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createWatchlistApiWatchlistsPost(requestParameters: CreateWatchlistApiWatchlistsPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<WatchlistOut>;
    public createWatchlistApiWatchlistsPost(requestParameters: CreateWatchlistApiWatchlistsPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<WatchlistOut>>;
    public createWatchlistApiWatchlistsPost(requestParameters: CreateWatchlistApiWatchlistsPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<WatchlistOut>>;
    public createWatchlistApiWatchlistsPost(requestParameters: CreateWatchlistApiWatchlistsPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const watchlistCreate = requestParameters?.watchlistCreate;
        if (watchlistCreate === null || watchlistCreate === undefined) {
            throw new Error('Required parameter watchlistCreate was null or undefined when calling createWatchlistApiWatchlistsPost.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/watchlists/`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<WatchlistOut>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: watchlistCreate,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Watchlist
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteWatchlistApiWatchlistsWatchlistIdDelete(requestParameters: DeleteWatchlistApiWatchlistsWatchlistIdDeleteRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteWatchlistApiWatchlistsWatchlistIdDelete(requestParameters: DeleteWatchlistApiWatchlistsWatchlistIdDeleteRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteWatchlistApiWatchlistsWatchlistIdDelete(requestParameters: DeleteWatchlistApiWatchlistsWatchlistIdDeleteRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteWatchlistApiWatchlistsWatchlistIdDelete(requestParameters: DeleteWatchlistApiWatchlistsWatchlistIdDeleteRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const watchlistId = requestParameters?.watchlistId;
        if (watchlistId === null || watchlistId === undefined) {
            throw new Error('Required parameter watchlistId was null or undefined when calling deleteWatchlistApiWatchlistsWatchlistIdDelete.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/watchlists/${this.configuration.encodeParam({name: "watchlistId", value: watchlistId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('delete', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Watchlist
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWatchlistApiWatchlistsWatchlistIdGet(requestParameters: GetWatchlistApiWatchlistsWatchlistIdGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<WatchlistOut>;
    public getWatchlistApiWatchlistsWatchlistIdGet(requestParameters: GetWatchlistApiWatchlistsWatchlistIdGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<WatchlistOut>>;
    public getWatchlistApiWatchlistsWatchlistIdGet(requestParameters: GetWatchlistApiWatchlistsWatchlistIdGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<WatchlistOut>>;
    public getWatchlistApiWatchlistsWatchlistIdGet(requestParameters: GetWatchlistApiWatchlistsWatchlistIdGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const watchlistId = requestParameters?.watchlistId;
        if (watchlistId === null || watchlistId === undefined) {
            throw new Error('Required parameter watchlistId was null or undefined when calling getWatchlistApiWatchlistsWatchlistIdGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/watchlists/${this.configuration.encodeParam({name: "watchlistId", value: watchlistId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<WatchlistOut>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List Watchlists
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listWatchlistsApiWatchlistsGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<WatchlistOut>>;
    public listWatchlistsApiWatchlistsGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<WatchlistOut>>>;
    public listWatchlistsApiWatchlistsGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<WatchlistOut>>>;
    public listWatchlistsApiWatchlistsGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/watchlists/`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Array<WatchlistOut>>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Remove Item
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeItemApiWatchlistsWatchlistIdItemsSymbolDelete(requestParameters: RemoveItemApiWatchlistsWatchlistIdItemsSymbolDeleteRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<WatchlistOut>;
    public removeItemApiWatchlistsWatchlistIdItemsSymbolDelete(requestParameters: RemoveItemApiWatchlistsWatchlistIdItemsSymbolDeleteRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<WatchlistOut>>;
    public removeItemApiWatchlistsWatchlistIdItemsSymbolDelete(requestParameters: RemoveItemApiWatchlistsWatchlistIdItemsSymbolDeleteRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<WatchlistOut>>;
    public removeItemApiWatchlistsWatchlistIdItemsSymbolDelete(requestParameters: RemoveItemApiWatchlistsWatchlistIdItemsSymbolDeleteRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const watchlistId = requestParameters?.watchlistId;
        if (watchlistId === null || watchlistId === undefined) {
            throw new Error('Required parameter watchlistId was null or undefined when calling removeItemApiWatchlistsWatchlistIdItemsSymbolDelete.');
        }
        const symbol = requestParameters?.symbol;
        if (symbol === null || symbol === undefined) {
            throw new Error('Required parameter symbol was null or undefined when calling removeItemApiWatchlistsWatchlistIdItemsSymbolDelete.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/watchlists/${this.configuration.encodeParam({name: "watchlistId", value: watchlistId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/items/${this.configuration.encodeParam({name: "symbol", value: symbol, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<WatchlistOut>('delete', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Reorder Items
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reorderItemsApiWatchlistsWatchlistIdItemsReorderPatch(requestParameters: ReorderItemsApiWatchlistsWatchlistIdItemsReorderPatchRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<WatchlistOut>;
    public reorderItemsApiWatchlistsWatchlistIdItemsReorderPatch(requestParameters: ReorderItemsApiWatchlistsWatchlistIdItemsReorderPatchRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<WatchlistOut>>;
    public reorderItemsApiWatchlistsWatchlistIdItemsReorderPatch(requestParameters: ReorderItemsApiWatchlistsWatchlistIdItemsReorderPatchRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<WatchlistOut>>;
    public reorderItemsApiWatchlistsWatchlistIdItemsReorderPatch(requestParameters: ReorderItemsApiWatchlistsWatchlistIdItemsReorderPatchRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const watchlistId = requestParameters?.watchlistId;
        if (watchlistId === null || watchlistId === undefined) {
            throw new Error('Required parameter watchlistId was null or undefined when calling reorderItemsApiWatchlistsWatchlistIdItemsReorderPatch.');
        }
        const reorderPayload = requestParameters?.reorderPayload;
        if (reorderPayload === null || reorderPayload === undefined) {
            throw new Error('Required parameter reorderPayload was null or undefined when calling reorderItemsApiWatchlistsWatchlistIdItemsReorderPatch.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/watchlists/${this.configuration.encodeParam({name: "watchlistId", value: watchlistId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/items/reorder`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<WatchlistOut>('patch', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: reorderPayload,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Watchlist
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateWatchlistApiWatchlistsWatchlistIdPatch(requestParameters: UpdateWatchlistApiWatchlistsWatchlistIdPatchRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<WatchlistOut>;
    public updateWatchlistApiWatchlistsWatchlistIdPatch(requestParameters: UpdateWatchlistApiWatchlistsWatchlistIdPatchRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<WatchlistOut>>;
    public updateWatchlistApiWatchlistsWatchlistIdPatch(requestParameters: UpdateWatchlistApiWatchlistsWatchlistIdPatchRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<WatchlistOut>>;
    public updateWatchlistApiWatchlistsWatchlistIdPatch(requestParameters: UpdateWatchlistApiWatchlistsWatchlistIdPatchRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const watchlistId = requestParameters?.watchlistId;
        if (watchlistId === null || watchlistId === undefined) {
            throw new Error('Required parameter watchlistId was null or undefined when calling updateWatchlistApiWatchlistsWatchlistIdPatch.');
        }
        const watchlistUpdate = requestParameters?.watchlistUpdate;
        if (watchlistUpdate === null || watchlistUpdate === undefined) {
            throw new Error('Required parameter watchlistUpdate was null or undefined when calling updateWatchlistApiWatchlistsWatchlistIdPatch.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/watchlists/${this.configuration.encodeParam({name: "watchlistId", value: watchlistId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<WatchlistOut>('patch', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: watchlistUpdate,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
