/**
 * FastAPI
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { HTTPValidationError } from '../model/http-validation-error';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';


export interface PolygonFetchTickersPolygonFetchTickersPostRequestParams {
    startGte?: string;
    limit?: number;
    /** If true, also write the raw JSON dump (allTickers_&lt;date&gt;.json). Defaults to false. Mongo upsert always runs. */
    writeJson?: boolean;
}


@Injectable({
  providedIn: 'root'
})
export class PolygonApiService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Fetch &amp; cache Polygon tickers
     * Fetches the current list of tickers from Polygon and upserts them into MongoDB.  By default this endpoint **does not** write the large JSON dump to disk. Pass &#x60;write_json&#x3D;true&#x60; to also persist a dated file named &#x60;allTickers_&lt;YYYY-MM-DD&gt;.json&#x60; on the server. MongoDB upserts are performed regardless of this flag.  **Query parameters:** - &#x60;start_gte&#x60; (str, default: \&#39;A\&#39;): Lower bound for ticker symbol (inclusive). - &#x60;limit&#x60; (int, default: 1000): Page size used for fetching from Polygon. - &#x60;write_json&#x60; (bool, default: false): Also write the raw JSON file in addition to Mongo upserts.  **Response:** Returns the resolved file path (or null if skipped), the file size in MB (0 when skipped), and the &#x60;write_json&#x60; flag.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public polygonFetchTickersPolygonFetchTickersPost(requestParameters?: PolygonFetchTickersPolygonFetchTickersPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public polygonFetchTickersPolygonFetchTickersPost(requestParameters?: PolygonFetchTickersPolygonFetchTickersPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public polygonFetchTickersPolygonFetchTickersPost(requestParameters?: PolygonFetchTickersPolygonFetchTickersPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public polygonFetchTickersPolygonFetchTickersPost(requestParameters?: PolygonFetchTickersPolygonFetchTickersPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const startGte = requestParameters?.startGte;
        const limit = requestParameters?.limit;
        const writeJson = requestParameters?.writeJson;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>startGte, 'start_gte');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>writeJson, 'write_json');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/polygon/fetch-tickers`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
