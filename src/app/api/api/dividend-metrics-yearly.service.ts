/**
 * FastAPI
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { HTTPValidationError } from '../model/http-validation-error';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';


export interface ApiFindYearlyByYearApiDividendMetricsYearlyYearYearGetRequestParams {
    year: number;
    /** Minimum year_yield filter (e.g. 4.0 for 4%) */
    minYield?: number | null;
    /** Maximum year_yield filter (e.g. 10.0 for 10%) */
    maxYield?: number | null;
    /** 1-based page number */
    page?: number;
    /** Results per page (max 500) */
    pageSize?: number;
}

export interface ApiFindYearlyByYearApiDividendMetricsYearlyYearYearGet0RequestParams {
    year: number;
    /** Minimum year_yield filter (e.g. 4.0 for 4%) */
    minYield?: number | null;
    /** Maximum year_yield filter (e.g. 10.0 for 10%) */
    maxYield?: number | null;
    /** 1-based page number */
    page?: number;
    /** Results per page (max 500) */
    pageSize?: number;
}

export interface ApiGetYearlyHistoryApiDividendMetricsYearlyHistoryTickerGetRequestParams {
    ticker: string;
    limitYears?: number;
}

export interface ApiGetYearlyHistoryApiDividendMetricsYearlyHistoryTickerGet0RequestParams {
    ticker: string;
    limitYears?: number;
}

export interface ApiRebuildAllYearlyMetricsApiDividendMetricsYearlyRebuildPostRequestParams {
    includeYtd?: boolean;
    minYear?: number | null;
    maxYear?: number | null;
}

export interface ApiRebuildAllYearlyMetricsApiDividendMetricsYearlyRebuildPost0RequestParams {
    includeYtd?: boolean;
    minYear?: number | null;
    maxYear?: number | null;
}

export interface ApiRebuildOneYearlyMetricsApiDividendMetricsYearlyRebuildTickerPostRequestParams {
    ticker: string;
    background?: boolean;
    includeYtd?: boolean;
    minYear?: number | null;
    maxYear?: number | null;
}

export interface ApiRebuildOneYearlyMetricsApiDividendMetricsYearlyRebuildTickerPost0RequestParams {
    ticker: string;
    background?: boolean;
    includeYtd?: boolean;
    minYear?: number | null;
    maxYear?: number | null;
}


@Injectable({
  providedIn: 'root'
})
export class DividendMetricsYearlyApiService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Screen by calendar year
     * Returns paged yearly dividend snapshots for a specific calendar year, optionally filtering by a minimum and/or maximum dividend yield for that year.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiFindYearlyByYearApiDividendMetricsYearlyYearYearGet(requestParameters: ApiFindYearlyByYearApiDividendMetricsYearlyYearYearGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public apiFindYearlyByYearApiDividendMetricsYearlyYearYearGet(requestParameters: ApiFindYearlyByYearApiDividendMetricsYearlyYearYearGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public apiFindYearlyByYearApiDividendMetricsYearlyYearYearGet(requestParameters: ApiFindYearlyByYearApiDividendMetricsYearlyYearYearGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public apiFindYearlyByYearApiDividendMetricsYearlyYearYearGet(requestParameters: ApiFindYearlyByYearApiDividendMetricsYearlyYearYearGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const year = requestParameters?.year;
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined when calling apiFindYearlyByYearApiDividendMetricsYearlyYearYearGet.');
        }
        const minYield = requestParameters?.minYield;
        const maxYield = requestParameters?.maxYield;
        const page = requestParameters?.page;
        const pageSize = requestParameters?.pageSize;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>minYield, 'min_yield');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>maxYield, 'max_yield');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>page, 'page');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pageSize, 'page_size');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dividend-metrics-yearly/year/${this.configuration.encodeParam({name: "year", value: year, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Screen by calendar year
     * Returns paged yearly dividend snapshots for a specific calendar year, optionally filtering by a minimum and/or maximum dividend yield for that year.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiFindYearlyByYearApiDividendMetricsYearlyYearYearGet_1(requestParameters: ApiFindYearlyByYearApiDividendMetricsYearlyYearYearGet0RequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public apiFindYearlyByYearApiDividendMetricsYearlyYearYearGet_1(requestParameters: ApiFindYearlyByYearApiDividendMetricsYearlyYearYearGet0RequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public apiFindYearlyByYearApiDividendMetricsYearlyYearYearGet_1(requestParameters: ApiFindYearlyByYearApiDividendMetricsYearlyYearYearGet0RequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public apiFindYearlyByYearApiDividendMetricsYearlyYearYearGet_1(requestParameters: ApiFindYearlyByYearApiDividendMetricsYearlyYearYearGet0RequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const year = requestParameters?.year;
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined when calling apiFindYearlyByYearApiDividendMetricsYearlyYearYearGet_1.');
        }
        const minYield = requestParameters?.minYield;
        const maxYield = requestParameters?.maxYield;
        const page = requestParameters?.page;
        const pageSize = requestParameters?.pageSize;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>minYield, 'min_yield');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>maxYield, 'max_yield');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>page, 'page');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pageSize, 'page_size');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dividend-metrics-yearly/year/${this.configuration.encodeParam({name: "year", value: year, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get yearly dividend history for a ticker
     * Returns descending yearly dividend snapshots (one document per year) for the given ticker. Useful to chart dividend growth and yield history.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiGetYearlyHistoryApiDividendMetricsYearlyHistoryTickerGet(requestParameters: ApiGetYearlyHistoryApiDividendMetricsYearlyHistoryTickerGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public apiGetYearlyHistoryApiDividendMetricsYearlyHistoryTickerGet(requestParameters: ApiGetYearlyHistoryApiDividendMetricsYearlyHistoryTickerGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public apiGetYearlyHistoryApiDividendMetricsYearlyHistoryTickerGet(requestParameters: ApiGetYearlyHistoryApiDividendMetricsYearlyHistoryTickerGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public apiGetYearlyHistoryApiDividendMetricsYearlyHistoryTickerGet(requestParameters: ApiGetYearlyHistoryApiDividendMetricsYearlyHistoryTickerGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const ticker = requestParameters?.ticker;
        if (ticker === null || ticker === undefined) {
            throw new Error('Required parameter ticker was null or undefined when calling apiGetYearlyHistoryApiDividendMetricsYearlyHistoryTickerGet.');
        }
        const limitYears = requestParameters?.limitYears;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limitYears, 'limit_years');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dividend-metrics-yearly/history/${this.configuration.encodeParam({name: "ticker", value: ticker, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get yearly dividend history for a ticker
     * Returns descending yearly dividend snapshots (one document per year) for the given ticker. Useful to chart dividend growth and yield history.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiGetYearlyHistoryApiDividendMetricsYearlyHistoryTickerGet_2(requestParameters: ApiGetYearlyHistoryApiDividendMetricsYearlyHistoryTickerGet0RequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public apiGetYearlyHistoryApiDividendMetricsYearlyHistoryTickerGet_2(requestParameters: ApiGetYearlyHistoryApiDividendMetricsYearlyHistoryTickerGet0RequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public apiGetYearlyHistoryApiDividendMetricsYearlyHistoryTickerGet_2(requestParameters: ApiGetYearlyHistoryApiDividendMetricsYearlyHistoryTickerGet0RequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public apiGetYearlyHistoryApiDividendMetricsYearlyHistoryTickerGet_2(requestParameters: ApiGetYearlyHistoryApiDividendMetricsYearlyHistoryTickerGet0RequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const ticker = requestParameters?.ticker;
        if (ticker === null || ticker === undefined) {
            throw new Error('Required parameter ticker was null or undefined when calling apiGetYearlyHistoryApiDividendMetricsYearlyHistoryTickerGet_2.');
        }
        const limitYears = requestParameters?.limitYears;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limitYears, 'limit_years');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dividend-metrics-yearly/history/${this.configuration.encodeParam({name: "ticker", value: ticker, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Rebuild yearly dividend metrics for the full universe
     * Triggers an asynchronous rebuild of yearly dividend snapshots for all tickers. Optionally bound the year range and include the current YTD partial year.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiRebuildAllYearlyMetricsApiDividendMetricsYearlyRebuildPost(requestParameters?: ApiRebuildAllYearlyMetricsApiDividendMetricsYearlyRebuildPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public apiRebuildAllYearlyMetricsApiDividendMetricsYearlyRebuildPost(requestParameters?: ApiRebuildAllYearlyMetricsApiDividendMetricsYearlyRebuildPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public apiRebuildAllYearlyMetricsApiDividendMetricsYearlyRebuildPost(requestParameters?: ApiRebuildAllYearlyMetricsApiDividendMetricsYearlyRebuildPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public apiRebuildAllYearlyMetricsApiDividendMetricsYearlyRebuildPost(requestParameters?: ApiRebuildAllYearlyMetricsApiDividendMetricsYearlyRebuildPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const includeYtd = requestParameters?.includeYtd;
        const minYear = requestParameters?.minYear;
        const maxYear = requestParameters?.maxYear;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>includeYtd, 'include_ytd');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>minYear, 'min_year');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>maxYear, 'max_year');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dividend-metrics-yearly/rebuild`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Rebuild yearly dividend metrics for the full universe
     * Triggers an asynchronous rebuild of yearly dividend snapshots for all tickers. Optionally bound the year range and include the current YTD partial year.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiRebuildAllYearlyMetricsApiDividendMetricsYearlyRebuildPost_3(requestParameters?: ApiRebuildAllYearlyMetricsApiDividendMetricsYearlyRebuildPost0RequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public apiRebuildAllYearlyMetricsApiDividendMetricsYearlyRebuildPost_3(requestParameters?: ApiRebuildAllYearlyMetricsApiDividendMetricsYearlyRebuildPost0RequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public apiRebuildAllYearlyMetricsApiDividendMetricsYearlyRebuildPost_3(requestParameters?: ApiRebuildAllYearlyMetricsApiDividendMetricsYearlyRebuildPost0RequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public apiRebuildAllYearlyMetricsApiDividendMetricsYearlyRebuildPost_3(requestParameters?: ApiRebuildAllYearlyMetricsApiDividendMetricsYearlyRebuildPost0RequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const includeYtd = requestParameters?.includeYtd;
        const minYear = requestParameters?.minYear;
        const maxYear = requestParameters?.maxYear;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>includeYtd, 'include_ytd');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>minYear, 'min_year');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>maxYear, 'max_year');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dividend-metrics-yearly/rebuild`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Rebuild yearly dividend metrics for a single ticker
     * Rebuilds yearly snapshots for one ticker. Can run in the background and be limited to a year range; optionally include the current YTD.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiRebuildOneYearlyMetricsApiDividendMetricsYearlyRebuildTickerPost(requestParameters: ApiRebuildOneYearlyMetricsApiDividendMetricsYearlyRebuildTickerPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public apiRebuildOneYearlyMetricsApiDividendMetricsYearlyRebuildTickerPost(requestParameters: ApiRebuildOneYearlyMetricsApiDividendMetricsYearlyRebuildTickerPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public apiRebuildOneYearlyMetricsApiDividendMetricsYearlyRebuildTickerPost(requestParameters: ApiRebuildOneYearlyMetricsApiDividendMetricsYearlyRebuildTickerPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public apiRebuildOneYearlyMetricsApiDividendMetricsYearlyRebuildTickerPost(requestParameters: ApiRebuildOneYearlyMetricsApiDividendMetricsYearlyRebuildTickerPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const ticker = requestParameters?.ticker;
        if (ticker === null || ticker === undefined) {
            throw new Error('Required parameter ticker was null or undefined when calling apiRebuildOneYearlyMetricsApiDividendMetricsYearlyRebuildTickerPost.');
        }
        const background = requestParameters?.background;
        const includeYtd = requestParameters?.includeYtd;
        const minYear = requestParameters?.minYear;
        const maxYear = requestParameters?.maxYear;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>background, 'background');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>includeYtd, 'include_ytd');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>minYear, 'min_year');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>maxYear, 'max_year');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dividend-metrics-yearly/rebuild/${this.configuration.encodeParam({name: "ticker", value: ticker, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Rebuild yearly dividend metrics for a single ticker
     * Rebuilds yearly snapshots for one ticker. Can run in the background and be limited to a year range; optionally include the current YTD.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiRebuildOneYearlyMetricsApiDividendMetricsYearlyRebuildTickerPost_4(requestParameters: ApiRebuildOneYearlyMetricsApiDividendMetricsYearlyRebuildTickerPost0RequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public apiRebuildOneYearlyMetricsApiDividendMetricsYearlyRebuildTickerPost_4(requestParameters: ApiRebuildOneYearlyMetricsApiDividendMetricsYearlyRebuildTickerPost0RequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public apiRebuildOneYearlyMetricsApiDividendMetricsYearlyRebuildTickerPost_4(requestParameters: ApiRebuildOneYearlyMetricsApiDividendMetricsYearlyRebuildTickerPost0RequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public apiRebuildOneYearlyMetricsApiDividendMetricsYearlyRebuildTickerPost_4(requestParameters: ApiRebuildOneYearlyMetricsApiDividendMetricsYearlyRebuildTickerPost0RequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const ticker = requestParameters?.ticker;
        if (ticker === null || ticker === undefined) {
            throw new Error('Required parameter ticker was null or undefined when calling apiRebuildOneYearlyMetricsApiDividendMetricsYearlyRebuildTickerPost_4.');
        }
        const background = requestParameters?.background;
        const includeYtd = requestParameters?.includeYtd;
        const minYear = requestParameters?.minYear;
        const maxYear = requestParameters?.maxYear;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>background, 'background');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>includeYtd, 'include_ytd');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>minYear, 'min_year');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>maxYear, 'max_year');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dividend-metrics-yearly/rebuild/${this.configuration.encodeParam({name: "ticker", value: ticker, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
