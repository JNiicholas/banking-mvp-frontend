/**
 * FastAPI
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { GICSSector } from '../model/gics-sector';
// @ts-ignore
import { HTTPValidationError } from '../model/http-validation-error';
// @ts-ignore
import { SortDir } from '../model/sort-dir';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';


export interface ApiFinancialsSearchApiFinancialsSearchGetRequestParams {
    /** Field to sort by (e.g., market_cap, pe, dividend_yield, revenue_growth_yoy) */
    sortBy?: string;
    sortDir?: SortDir;
    page?: number;
    pageSize?: number;
    sector?: GICSSector | null;
    industry?: string | null;
    minMcap?: number | null;
    maxMcap?: number | null;
    minPe?: number | null;
    maxPe?: number | null;
    minPb?: number | null;
    maxPb?: number | null;
    minPs?: number | null;
    maxPs?: number | null;
    minDividendYield?: number | null;
    maxDividendYield?: number | null;
    maxPayoutRatio?: number | null;
    maxNetDebtToEbitda?: number | null;
    minRevenueGrowthYoy?: number | null;
    minEpsGrowthYoy?: number | null;
    frequency?: number | null;
}


@Injectable({
  providedIn: 'root'
})
export class ScreeningApiService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Screen materialized financials
     * Filters and sorts the &#x60;financials_materialized&#x60; snapshots using optional constraints such as market cap, P/E, P/B, P/S, dividend yield, payout ratio, leverage, and growth metrics. Supports pagination via &#x60;page&#x60; and &#x60;page_size&#x60;.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiFinancialsSearchApiFinancialsSearchGet(requestParameters?: ApiFinancialsSearchApiFinancialsSearchGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public apiFinancialsSearchApiFinancialsSearchGet(requestParameters?: ApiFinancialsSearchApiFinancialsSearchGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public apiFinancialsSearchApiFinancialsSearchGet(requestParameters?: ApiFinancialsSearchApiFinancialsSearchGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public apiFinancialsSearchApiFinancialsSearchGet(requestParameters?: ApiFinancialsSearchApiFinancialsSearchGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const sortBy = requestParameters?.sortBy;
        const sortDir = requestParameters?.sortDir;
        const page = requestParameters?.page;
        const pageSize = requestParameters?.pageSize;
        const sector = requestParameters?.sector;
        const industry = requestParameters?.industry;
        const minMcap = requestParameters?.minMcap;
        const maxMcap = requestParameters?.maxMcap;
        const minPe = requestParameters?.minPe;
        const maxPe = requestParameters?.maxPe;
        const minPb = requestParameters?.minPb;
        const maxPb = requestParameters?.maxPb;
        const minPs = requestParameters?.minPs;
        const maxPs = requestParameters?.maxPs;
        const minDividendYield = requestParameters?.minDividendYield;
        const maxDividendYield = requestParameters?.maxDividendYield;
        const maxPayoutRatio = requestParameters?.maxPayoutRatio;
        const maxNetDebtToEbitda = requestParameters?.maxNetDebtToEbitda;
        const minRevenueGrowthYoy = requestParameters?.minRevenueGrowthYoy;
        const minEpsGrowthYoy = requestParameters?.minEpsGrowthYoy;
        const frequency = requestParameters?.frequency;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sortBy, 'sort_by');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sortDir, 'sort_dir');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>page, 'page');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pageSize, 'page_size');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sector, 'sector');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>industry, 'industry');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>minMcap, 'min_mcap');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>maxMcap, 'max_mcap');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>minPe, 'min_pe');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>maxPe, 'max_pe');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>minPb, 'min_pb');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>maxPb, 'max_pb');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>minPs, 'min_ps');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>maxPs, 'max_ps');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>minDividendYield, 'min_dividend_yield');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>maxDividendYield, 'max_dividend_yield');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>maxPayoutRatio, 'max_payout_ratio');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>maxNetDebtToEbitda, 'max_net_debt_to_ebitda');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>minRevenueGrowthYoy, 'min_revenue_growth_yoy');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>minEpsGrowthYoy, 'min_eps_growth_yoy');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>frequency, 'frequency');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/financials/search`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
