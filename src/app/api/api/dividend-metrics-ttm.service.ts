/**
 * FastAPI
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { HTTPValidationError } from '../model/http-validation-error';
// @ts-ignore
import { MetricsSearchResponse } from '../model/metrics-search-response';
// @ts-ignore
import { RebuildAllResponse } from '../model/rebuild-all-response';
// @ts-ignore
import { RebuildOneResponse } from '../model/rebuild-one-response';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';


export interface ApiFindByYieldApiDividendMetricsSearchGetRequestParams {
    /** Minimum TTM dividend yield (%) */
    minYield?: number;
    /** Maximum TTM dividend yield (%) */
    maxYield?: number | null;
    /** Exact number of dividend payments detected in the rolling TTM window (e.g., 12&#x3D;monthly, 4&#x3D;quarterly) */
    freq?: number | null;
    page?: number;
    pageSize?: number;
}

export interface ApiRebuildOneMetricsApiDividendMetricsRebuildTickerPostRequestParams {
    ticker: string;
}


@Injectable({
  providedIn: 'root'
})
export class DividendMetricsTTMApiService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Search materialized metrics by TTM dividend yield (min/max)
     * Screens the &#x60;dividend_metrics&#x60; collection using **TTM dividend yield**, optionally constrained by an upper bound and/or an exact detected payment frequency (TTM window). Supports pagination.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiFindByYieldApiDividendMetricsSearchGet(requestParameters?: ApiFindByYieldApiDividendMetricsSearchGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<MetricsSearchResponse>;
    public apiFindByYieldApiDividendMetricsSearchGet(requestParameters?: ApiFindByYieldApiDividendMetricsSearchGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<MetricsSearchResponse>>;
    public apiFindByYieldApiDividendMetricsSearchGet(requestParameters?: ApiFindByYieldApiDividendMetricsSearchGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<MetricsSearchResponse>>;
    public apiFindByYieldApiDividendMetricsSearchGet(requestParameters?: ApiFindByYieldApiDividendMetricsSearchGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const minYield = requestParameters?.minYield;
        const maxYield = requestParameters?.maxYield;
        const freq = requestParameters?.freq;
        const page = requestParameters?.page;
        const pageSize = requestParameters?.pageSize;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>minYield, 'min_yield');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>maxYield, 'max_yield');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>freq, 'freq');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>page, 'page');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pageSize, 'page_size');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dividend-metrics/search`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<MetricsSearchResponse>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Rebuild metrics for all tickers (TTM)
     * Triggers a background rebuild of the **TTM dividend metrics** for the entire universe. The call returns immediately while work continues in the background.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiRebuildAllMetricsApiDividendMetricsRebuildPost(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<RebuildAllResponse>;
    public apiRebuildAllMetricsApiDividendMetricsRebuildPost(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<RebuildAllResponse>>;
    public apiRebuildAllMetricsApiDividendMetricsRebuildPost(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<RebuildAllResponse>>;
    public apiRebuildAllMetricsApiDividendMetricsRebuildPost(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dividend-metrics/rebuild`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<RebuildAllResponse>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Rebuild metrics for a single ticker
     * Recomputes the **TTM dividend metrics** document for the specified ticker and returns the updated snapshot.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiRebuildOneMetricsApiDividendMetricsRebuildTickerPost(requestParameters: ApiRebuildOneMetricsApiDividendMetricsRebuildTickerPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<RebuildOneResponse>;
    public apiRebuildOneMetricsApiDividendMetricsRebuildTickerPost(requestParameters: ApiRebuildOneMetricsApiDividendMetricsRebuildTickerPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<RebuildOneResponse>>;
    public apiRebuildOneMetricsApiDividendMetricsRebuildTickerPost(requestParameters: ApiRebuildOneMetricsApiDividendMetricsRebuildTickerPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<RebuildOneResponse>>;
    public apiRebuildOneMetricsApiDividendMetricsRebuildTickerPost(requestParameters: ApiRebuildOneMetricsApiDividendMetricsRebuildTickerPostRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const ticker = requestParameters?.ticker;
        if (ticker === null || ticker === undefined) {
            throw new Error('Required parameter ticker was null or undefined when calling apiRebuildOneMetricsApiDividendMetricsRebuildTickerPost.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dividend-metrics/rebuild/${this.configuration.encodeParam({name: "ticker", value: ticker, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<RebuildOneResponse>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
